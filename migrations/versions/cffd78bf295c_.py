"""

NOTE: This upgrade will force the location to 'forge' on all files!

Revision ID: cffd78bf295c
Revises: 6a5d6b8f2d27
Create Date: 2016-06-07 17:06:10.348787

"""

# revision identifiers, used by Alembic.
revision = 'cffd78bf295c'
down_revision = '6a5d6b8f2d27'

from alembic import op
from sqlalchemy.sql import text

import sqlalchemy as sa


def upgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.create_table('jobs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('status', sa.String(), nullable=True),
    sa.Column('pipeline', sa.String(), nullable=True),
    sa.Column('start_date', sa.DateTime(), nullable=True),
    sa.Column('end_date', sa.DateTime(), nullable=True),
    sa.Column('user_id', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_table('runs')
    op.create_table('runs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('sample_name', sa.String(), nullable=True),
    sa.Column('readset', sa.String(), nullable=True),
    sa.Column('library', sa.String(), nullable=True),
    sa.Column('run_type', sa.String(), nullable=True),
    sa.Column('bed', sa.Integer(), nullable=True),
    sa.Column('fastq1', sa.Integer(), nullable=True),
    sa.Column('fastq2', sa.Integer(), nullable=True),
    sa.Column('bam', sa.Integer(), nullable=True),
    sa.Column('job_id', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['bam'], ['files.id'], ),
    sa.ForeignKeyConstraint(['bed'], ['files.id'], ),
    sa.ForeignKeyConstraint(['fastq1'], ['files.id'], ),
    sa.ForeignKeyConstraint(['fastq2'], ['files.id'], ),
    sa.ForeignKeyConstraint(['job_id'], ['jobs.id'], ),
    sa.ForeignKeyConstraint(['sample_name'], ['samples.sample_name'], ),
    sa.PrimaryKeyConstraint('id')
    )

    conn = op.get_bind()

    sql_create_files2 = text("CREATE TABLE files2 AS SELECT *, 'forge' AS location FROM files")
    conn.execute(sql_create_files2)

    sql_drop_files = text("DROP TABLE files")
    conn.execute(sql_drop_files)

    sql_create_files = text("CREATE TABLE files AS SELECT * from files2")
    conn.execute(sql_create_files)

    sql_drop_files2 = text("DROP TABLE files2")
    conn.execute(sql_drop_files2)
    ### end Alembic commands ###


def downgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('jobs')
    op.drop_table('runs')

    op.create_table('runs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('readset', sa.String(), nullable=True),
    sa.Column('library', sa.String(), nullable=True),
    sa.Column('run_type', sa.String(), nullable=True),
    sa.Column('bed', sa.String(), nullable=True),
    sa.Column('fastq1', sa.String(), nullable=True),
    sa.Column('fastq2', sa.String(), nullable=True),
    sa.Column('bam', sa.String(), nullable=True),
    sa.Column('status', sa.String(), nullable=True),
    sa.Column('user_id', sa.String(), nullable=True),
    sa.Column('sample_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['sample_id'], ['samples.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('id')
    )

    conn = op.get_bind()

    sql_create_files2 = text("CREATE TABLE files2 AS SELECT id,identifier,filename,total_size,file_type,readset,"
                             "platform,run_type,capture_kit,library,reference,upload_status,upload_start_date,"
                             "upload_end_date,user_id,access_id FROM files")
    conn.execute(sql_create_files2)

    sql_drop_files = text("DROP TABLE files")
    conn.execute(sql_drop_files)

    sql_create_files = text("CREATE TABLE files AS SELECT * from files2")
    conn.execute(sql_create_files)

    sql_drop_files2 = text("DROP TABLE files2")
    conn.execute(sql_drop_files2)
    ### end Alembic commands ###
